#!/usr/bin/env bash
# author: joe.zheng
# version: 24.03.21

set -e

SELF="$(basename $0)"
SELF_VERSION="$(sed -n '1,4s/# version: \(.*\)/\1/p' $0)"
NAME="${SELF#*-}"

SUDO="sudo"
if [[ $(id -u) == "0" ]]; then
  SUDO=""
fi

VERSION="0.28.0"      # version to deploy
DRY_RUN=n             # print information only
MIRROR="auto"         # mirror option
MIRRORS="yes no auto" # valid mirror options
RESET=n               # reset the deployment
UNINSTALL=n           # reset the deployment and uninstall components
OFFLINE=${OFFLINE:-n} # no external network

REPO_URL="https://github.com/intel/intel-device-plugins-for-kubernetes"
GITHUB_RAW="https://raw.githubusercontent.com"                # github raw content base url
MIRROR_URL="${MIRROR_URL:-https://iffi.me/proxy}"             # mirror to use for github

VARIANT="$(uname -s | tr A-Z a-z)-$(uname -m | sed 's/x86_64/amd64/')"
TIMEOUT="300s"
NAMESPACE="default"

CACHE="cache"
CACHE_MANIFESTS="$CACHE/manifests"
CACHE_PACKAGES="$CACHE/packages/common"
CACHE_RUN="$CACHE/run/$SELF"

function msg() {
  echo "> $@"
}

function err() {
  echo "> $@" >&2
}

function usage() {
  cat <<EOF
Usage: $SELF [-m <type>] [-v <ver>] [-R] [-U] [-n] [-h]

  Deploy $NAME in Kubernetes cluster the easy way

  -m <type>: use mirror [$MIRRORS], default: $MIRROR
  -v <ver>:  target version, default: $VERSION
  -R:        reset the deployment, default: $RESET
  -U:        reset the deployment and uninstall components, default: $UNINSTALL
  -n:        print information only, default: $DRY_RUN
  -h:        print the usage message

Cache:

  To speed up deployment, the required files will be cached at "$CACHE"

Environment variables:
  MIRROR_URL:  mirror to use, default: $MIRROR_URL
  OFFLINE:     force into offline mode [y n], default: $OFFLINE

Examples:

  1. Deploy $NAME
     $SELF

  2. Reset the deployment
     $SELF -R

  3. Deploy $NAME with specific version
     $SELF -v $VERSION

  4. Reset the deployment and uninstall
     $SELF -U

Version: $SELF_VERSION
EOF

}

function current_version() {
  local version=
  if which kubectl >/dev/null; then
    version="$(kubectl describe -n $NAMESPACE ds/intel-sgx-plugin 2>/dev/null | sed -n 's/^\s*Image:\s*.*://p')"
  fi
  echo $version
}

HAS_NFD=n
function check_nfd() {
  msg "check NFD"
  # TODO: find more stable way to probe NFD
  local ns="node-feature-discovery"
  if kubectl get -n $ns deploy/nfd-master >/dev/null 2>&1; then
    HAS_NFD=y
  fi
  msg "NFD is deployed: $HAS_NFD"
}

function main() {
  # adjust default version if already deployed
  local deployed="$(current_version)"
  VERSION="${deployed:-$VERSION}"

  while getopts ":m:v:hnRU" opt
  do
    case $opt in
      m ) MIRROR=$OPTARG
          if echo $MIRRORS | grep -v -w $MIRROR >/dev/null 2>&1; then
            err "invalid mirror option $MIRROR"
            usage && exit 1
          fi
          ;;
      v ) VERSION=${OPTARG#v};;
      R ) RESET=y;;
      U ) RESET=y && UNINSTALL=y;;
      n ) DRY_RUN=y;;
      h ) usage && exit;;
      * ) usage && echo "invalid option: -$OPTARG" && exit 1;;
    esac
  done
  shift $((OPTIND-1))

  for v in CACHE DRY_RUN MIRROR MIRROR_URL OFFLINE RESET UNINSTALL VERSION
  do
    eval echo "$v: \${$v}"
  done

  msg "deployed version: $deployed"

  [[ $DRY_RUN == "y" ]] && exit

  check_prerequisites
  check_network
  check_mirror
  check_nfd
  ensure_workdir

  local dir_deploy="deployments"
  local dir_plugin="intel-device-plugins"
  local manifest_dir="$CACHE_MANIFESTS/$dir_plugin-$VERSION"
  local manifest_dir_deploy="$manifest_dir/$dir_deploy"
  local package_dir="$CACHE_PACKAGES/$dir_plugin-$VERSION"
  local package_file="v$VERSION.tar.gz"
  local package_path="$package_dir/$package_file"
  local manifest_app="$CACHE_RUN/sgx-demo.yaml"
  local manifest_app_ra="$CACHE_RUN/sgx-ra-demo.yaml"

  mkdir -p $package_dir $manifest_dir

  local base_url="$(mirror_url $REPO_URL)"

  msg "download intel-device-plugin"
  if [[ ! -e "$package_path" ]]; then
    if [[ $OFFLINE == "y" ]]; then
      err "no cache found: $package_path"
      exit 1
    else
      local package_url="$base_url/archive/refs/tags/$package_file"
      msg "download $package_url -> $package_path"
      curl -L $package_url > $package_path
    fi
  fi

  msg "prepare manifest"
  if [[ ! -d "$manifest_dir_deploy" ]]; then
    msg "extract $package_path -> $manifest_dir_deploy"
    tar xzf $package_path -C $manifest_dir --strip-components=1 --no-wildcards-match-slash --wildcards "*/$dir_deploy/"
  fi

  if [[ $RESET == "y" ]]; then
    msg "delete $NAME deployment (if any)"
    local modules="nfd/overlays/node-feature-rules sgx_plugin/overlays/epc-nfd sgx_plugin/overlays/epc-register sgx_admissionwebhook"
    for m in $modules; do
      kubectl delete --ignore-not-found -k "$manifest_dir_deploy/$m" 2>/dev/null || true
    done
  else
    msg "deploy $NAME (with NFD: $HAS_NFD)"
    local modules="sgx_plugin/overlays/epc-register sgx_admissionwebhook"
    if [[ $HAS_NFD == "y" ]]; then
      modules="nfd/overlays/node-feature-rules sgx_plugin/overlays/epc-nfd"
    fi
    for m in $modules; do
      kubectl apply -k "$manifest_dir_deploy/$m"
    done

    msg "deploy files for demo to $CACHE_RUN"
    tar xzf $package_path -C $CACHE_RUN --strip-components=1
    cat <<'EOF' > $manifest_app
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: sgx-demo
  annotations:
    sgx.intel.com/quote-provider: aesmd
  name: sgx-demo
spec:
  containers:
  - name: sgx-demo
    image: intel/sgx-sdk-demo:devel
    imagePullPolicy: IfNotPresent
    command: ["/opt/intel/sgx-sample-app/sgx-sample-app"]
    workingDir: "/opt/intel/sgx-sample-app/"
    resources:
      limits:
        sgx.intel.com/epc: "512Ki"
  dnsPolicy: ClusterFirst
  restartPolicy: Never
EOF
    cat <<'EOF' > $manifest_app_ra
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: sgx-ra-demo
  annotations:
    sgx.intel.com/quote-provider: aesmd
  name: sgx-ra-demo
spec:
  containers:
  - name: sgx-ra-demo
    image: intel/sgx-sdk-demo:devel
    imagePullPolicy: IfNotPresent
    command: ["/opt/intel/sgx-quote-generation/sgx-quote-generation"]
    workingDir: "/opt/intel/sgx-quote-generation/"
    resources:
      limits:
        sgx.intel.com/epc: "512Ki"
  dnsPolicy: ClusterFirst
  restartPolicy: Never
EOF
  fi

  if [[ $RESET != "y" ]]; then
    msg "wait until ready (timeout: $TIMEOUT)"
    kubectl -n $NAMESPACE rollout status ds/intel-sgx-plugin --timeout $TIMEOUT

    cat <<EOF

# here are some tips to follow:

# check current status
kubectl get -n $NAMESPACE ds

# check SGX is supported and enabled
cpuid -1 | grep -i sgx

# check SGX driver is ready
ls /dev/sgx*

# build container images for demo
(cd $CACHE_RUN && make sgx-aesmd-demo sgx-sdk-demo)
for i in aesmd sdk; do
  docker tag intel/sgx-\$i-demo:$VERSION intel/sgx-\$i-demo:devel
done

# deploy sgx demo and check result
kubectl apply -f $manifest_app
kubectl logs sgx-demo

# deploy SGX ECDSA attestation demo
# assume the PCCS has been deployed
systemctl status pccs | head

# deploy aesmd with PCCS at current host
sed -i -e "/pccs_url/ s/localhost/$(hostname)/" $CACHE_RUN/deployments/sgx_aesmd/base/sgx_default_qcnl.conf
kubectl apply -k $CACHE_RUN/deployments/sgx_aesmd

# deploy demo and check result
kubectl apply -f $manifest_app_ra
kubectl logs sgx-ra-demo

# remove the demo
kubectl delete -f $manifest_app_ra
kubectl delete -f $manifest_app
kubectl delete -k $CACHE_RUN/deployments/sgx_aesmd

# check more info at $REPO_URL
EOF
  fi

  msg "done"
}

function check_prerequisites() {
  msg "check prerequisites"
  if [[ -z $(which kubelet) ]]; then
    err "kubelet is not available"
    exit 1
  fi
  if [[ -z $(which curl) ]]; then
    err "curl is not available"
    exit 1
  fi
  if ! kubectl version >/dev/null 2>&1; then
    err "can't access k8s cluster"
    exit 1
  fi
}

function access_ok() {
   curl -IL -f -s -m 5 $1 >/dev/null 2>&1
}

function check_network() {
  msg "check network"
  if [[ $OFFLINE != 'y' ]]; then
    if ! access_ok example.com; then
      msg "can't access external network"
      OFFLINE="y"
    fi
  fi
  msg "offline mode: $OFFLINE"
}

USE_MIRROR=n
function check_mirror() {
  msg "use mirror or not"
  if [[ $MIRROR == "auto" ]]; then
    MIRROR=yes # default as needed
    if [[ $OFFLINE == "y" ]]; then
      msg "offline mode, assume mirror is needed"
    else
      msg "check whether we can access github"
      local target="$GITHUB_RAW"
      if access_ok $target; then
        msg "curl $target is OK"
        MIRROR=no
      else
        msg "curl $target is FAILED"
      fi
    fi
  fi
  if [[ $MIRROR == "yes" ]]; then
    msg "mirror is needed"
    if access_ok $MIRROR_URL; then
      USE_MIRROR="y"
    else
      err "failed to access mirror ($MIRROR_URL)"
    fi
  fi
  msg "use mirror: $USE_MIRROR"
}

function mirror_url() {
  local origin="${1:?argument missing}"

  if [[ $USE_MIRROR = "y" ]]; then
    echo -n "$MIRROR_URL/$origin"
  else
    echo -n "$origin"
  fi
}

function ensure_workdir() {
  msg "ensure workdir"

  for d in $CACHE_MANIFESTS $CACHE_PACKAGES $CACHE_RUN; do
    if [[ ! -d $d ]]; then
      msg "create dir: $d"
      mkdir -p $d
    fi
  done
}

main "$@"
