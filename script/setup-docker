#!/usr/bin/env bash
# author: joe.zheng
# version: 23.05.22

set -e

SELF="$(basename $0)"
SELF_VERSION="$(sed -n '1,4s/# version: \(.*\)/\1/p' $0)"

SUDO="sudo"
if [[ $(id -u) == "0" ]]; then
  SUDO=""
fi

DOCKER="$SUDO docker"
if id -nG | grep -qw docker; then
  DOCKER="docker"
fi

PRIVATE_CIDR="127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.168.0.0/16,10.0.0.0/8"
HOSTNAME="$(cat /proc/sys/kernel/hostname)"
DIST="$(source /etc/os-release && echo $ID | tr '[:upper:]' '[:lower:]')"

DRY_RUN="n"             # print information only
MIRROR="auto"           # mirror option
MIRRORS="yes no auto"   # valid mirror options
OFFLINE="${OFFLINE:-n}" # no external network
PORT_HTTP="912"
PORT_HTTPS="912"
PROXY_HOST=""
PROXY_PORT=""
PROXY_SKIP="localhost,$HOSTNAME,istio-system.svc,$PRIVATE_CIDR"
REPO_MIRROR="https://hub-mirror.c.163.com"
UNINSTALL=n             # uninstall completely
VERSION="latest"        # version to install

CACHE="cache"
CACHE_PACKAGES="$CACHE/packages/$DIST"
CACHE_RUN="$CACHE/run/$SELF"

SERVICE_CONFIG="/etc/systemd/system/docker.service.d/http-proxy.conf"
DOCKERD_CONFIG="/etc/docker/daemon.json"
DOCKERC_CONFIG=~/.docker/config.json    # not quoted to expand tilde

function msg() {
  echo "> $@"
}

function err() {
  echo "> $@" >&2
}

function usage() {
  cat <<EOF
Usage: $SELF [-M <mirror>] [-N <noproxy>] [-H <port>] [-S <port>] [-m <type>]
  [-v <ver>] [-U] [-n] [-h] [<host>] [<port>]

  Install Docker and configure it the easy way.

  -M <mirror>:  Docker registry mirror, default: $REPO_MIRROR
  -N <noproxy>: no_proxy settings, default: $PROXY_SKIP
  -H <port>:    proxy port for http, default: $PORT_HTTP
  -S <port>:    proxy port for https, default: $PORT_HTTPS
  -m <type>:    install via mirror [$MIRRORS], default: $MIRROR
  -v <ver>:     target version, default: $VERSION
  -U:           uninstall completely, default: $UNINSTALL
  -n:           dry run, print out information only, default: $DRY_RUN
  -h:           print the usage message

  <host>:       proxy host, "" to disable proxy, default: $PROXY_HOST
  <port>:       proxy port, override -HS options, default: $PROXY_PORT

Examples:

  1. Deploy with default configuration
     $SELF

  2. Deploy without proxy
     $SELF ""

  3. Deploy with specified proxy host and port (913 for http and https)
     $SELF http://proxy.example.com 913

  4. Deploy with specified proxy host and port (911 for http, 912 for https)
     $SELF -H 911 -S 912 http://proxy.example.com

  5. Uninstall
     $SELF -U

Version: $SELF_VERSION
EOF

}

function main() {
  # adjust default version if already deployed
  local v="$(current_version)"
  VERSION="${v:-$VERSION}"

  while getopts ":N:M:H:S:m:v:Unh" opt
  do
    case $opt in
      M ) REPO_MIRROR=$OPTARG;;
      N ) PROXY_SKIP=$OPTARG;;
      H ) PORT_HTTP=$OPTARG;;
      S ) PORT_HTTPS=$OPTARG;;
      m ) MIRROR=$OPTARG
          if echo $MIRRORS | grep -v -w $MIRROR >/dev/null 2>&1; then
            err "invalid mirror option $MIRROR"
            usage && exit 1
          fi
          ;;
      v ) VERSION=${OPTARG#v};;
      U ) UNINSTALL=y;;
      n ) DRY_RUN='y';;
      h ) usage && exit;;
      * ) usage && err "invalid option: $OPTARG" && exit 1;;
    esac
  done
  shift $((OPTIND-1))

  if (( $# >= 1 )); then
    PROXY_HOST="$1"
  fi
  if (( $# >= 2 )); then
    PROXY_PORT="$2"
  fi

  # export proxy settings
  if [[ -n $PROXY_HOST ]]; then
    export http_proxy=$PROXY_HOST:${PROXY_PORT:-$PORT_HTTP}
    export https_proxy=$PROXY_HOST:${PROXY_PORT:-$PORT_HTTPS}
    export no_proxy=$PROXY_SKIP
  else
    export http_proxy=
    export https_proxy=
    export no_proxy=
  fi

  for v in CACHE DIST DOCKERC_CONFIG DOCKERD_CONFIG DRY_RUN MIRROR OFFLINE PORT_HTTP PORT_HTTPS \
	   PROXY_HOST PROXY_PORT PROXY_SKIP REPO_MIRROR SERVICE_CONFIG VERSION; do
    eval echo "$v: \${$v}"
  done

  [[ $DRY_RUN == "y" ]] && exit

  warn_as_root
  validate_sudo
  check_prerequisites
  check_network
  check_mirror
  ensure_workdir
  ensure_cleanedup
  if [[ $UNINSTALL == "y" ]]; then
    ensure_uninstalled
  else
    ensure_installed
    ensure_configured
  fi

  msg "done"
}

function warn_as_root() {
  if [[ $(id -u) == "0" ]]; then
    msg "you are running as root user, docker will be configured to root only!"
    sleep 3
  fi
}

function current_version() {
  local version=
  if [[ -n $(which docker) ]]; then
    version="$($DOCKER version -f '{{.Server.Version}}')"
    version=${version#v}
  fi
  echo $version
}

function validate_sudo() {
  if [[ -n $SUDO ]]; then
    msg "validate sudo"
    sudo -v
  fi
}

function check_prerequisites() {
  msg "check prerequisites"
  if [[ -z $(which curl) ]]; then
    err "curl is not available"
    exit 1
  fi
  if [[ -z $(which python3) ]]; then
    err "python3 is not available"
    exit 1
  fi
}

function check_network() {
  msg "check network"
  if [[ $OFFLINE != 'y' ]]; then
    if ! curl -s -m 3 -I example.com >/dev/null; then
      msg "can't access external network"
      OFFLINE="y"
    fi
  fi
  msg "offline mode: $OFFLINE"
}

function ensure_workdir() {
  msg "ensure workdir"

  for d in $CACHE_PACKAGES $CACHE_RUN; do
    if [[ ! -d $d ]]; then
      msg "create dir: $d"
      mkdir -p $d
    fi
  done
}


NEED_MIRROR=n
function check_mirror() {
  msg "is mirror needed"
  if [[ $MIRROR == "auto" ]]; then
    MIRROR=yes # default as needed
    if [[ $OFFLINE == "y" ]]; then
      msg "offline mode, assume mirror is needed"
    else
      msg "check whether we can access google cloud"
      local target="https://cloud.google.com"
      if curl -s -m 5 $target >/dev/null 2>&1; then
        msg "curl $target is OK"
        MIRROR=no
      else
        msg "curl $target is FAILED"
      fi
    fi
  fi
  if [[ $MIRROR == "yes" ]]; then
    NEED_MIRROR=y
  fi
  msg "need mirror: $NEED_MIRROR"
}

function ensure_cleanedup() {
  msg "ensure old docker is cleaned up"

  if [[ $DIST == "centos" || $DIST == "openeuler" ]]; then
    $SUDO yum remove docker docker-client docker-client-latest docker-common \
      docker-latest docker-latest-logrotate docker-logrotate docker-engine || true
  elif [[ $DIST == "ubuntu" || $DIST == "debian" ]]; then
    $SUDO apt remove docker docker-engine docker.io containerd runc || true
  else
    err "\"$DIST\" is not supported!"
    exit 1
  fi
}

function ensure_installed() {
  msg "ensure docker is installed"
  local installed="$(current_version)"

  if [[ -z $installed ]]; then
    msg "docker is not available, install it"

    if [[ $DIST == "openeuler" ]]; then
      # WARN: only verified on openEuler 22.04 LTS
      # TODO: install latest version once openEuler has fuse-overlayfs
      local repo_url="https://download.docker.com/linux/centos/docker-ce.repo"
      if [[ $NEED_MIRROR == "yes" ]]; then
        repo_url="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo"
      fi
      $SUDO yum-config-manager --add-repo $repo_url
      echo "8" | $SUDO tee /etc/yum/vars/centosver
      $SUDO sed -i 's/\$releasever/\$centosver/g' /etc/yum.repos.d/docker-ce.repo
      $SUDO yum install -y docker-ce-19.03.15-3.el8
    else
      local tool="$CACHE_RUN/get-docker.sh"
      local opts=""
      if [[ $NEED_MIRROR == "yes" ]]; then
        opts="--mirror Aliyun"
      fi
      if [[ $VERSION != "latest" ]]; then
	opts="$opts --version $VERSION"
      fi
      msg "install with opts: $opts"
      curl -fsSL https://get.docker.com > $tool
      $SUDO sh $tool $opts
    fi
    msg "docker installation is done"
  else
    msg "version $installed has already installed"
    if [[ $VERSION != "latest" && $installed != $VERSION ]]; then
      msg "WARNING: the target version $VERSION is different from the installed one"
      msg "uninstall current version with following command and install again:"
      msg "  $SELF -U"
    fi
  fi
}

function ensure_uninstalled() {
  msg "ensure docker is uninstalled"

  if [[ $DIST == "centos" || $DIST == "openeuler" ]]; then
    $SUDO yum remove docker-ce docker-ce-cli containerd.io
    $SUDO yum remove docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras || true
  elif [[ $DIST == "ubuntu" || $DIST == "debian" ]]; then
    $SUDO apt purge --auto-remove docker-ce docker-ce-cli containerd.io
    $SUDO apt purge --auto-remove docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras || true
  else
    err "\"$DIST\" is not supported!"
    exit 1
  fi

  msg "try to remove user configurtion"
  for f in $SERVICE_CONFIG $DOCKERD_CONFIG $DOCKERC_CONFIG; do
    if [[ -e $f ]]; then
      read -p "delete $f? y/N: " result
      if [[ $result == "y" ]]; then
        $SUDO rm $f
      fi
    fi
  done

  # stop docker.socket in bogus state
  $SUDO systemctl stop docker.socket

  msg "images, containers and volumes arenâ€™t removed, do it by yourself:"
  cat <<EOF
$SUDO rm -rf /var/lib/docker
$SUDO rm -rf /var/lib/containerd
EOF
}

function ensure_configured() {
  msg "ensure docker is configured"

  if [[ -e $SERVICE_CONFIG || -e $DOCKERD_CONFIG || -e $DOCKERC_CONFIG ]]; then
    cat <<EOF
any of the following configuration files already exist
* $SERVICE_CONFIG
* $DOCKERD_CONFIG
* $DOCKERC_CONFIG
EOF
    read -p "overwrite them and continue? y/N: " result
    if [[ $result != "y" ]]; then
      exit
    fi
  fi

  msg "configure docker client: $DOCKERC_CONFIG"
  DOCKERC_CONFIG="$DOCKERC_CONFIG" python3 <<'EOF'
import os, json, pathlib, collections

nest_dict = lambda: collections.defaultdict(nest_dict)

f = pathlib.Path(os.environ['DOCKERC_CONFIG']).expanduser()
d = nest_dict()

try:
  with f.open() as fh:
    d.update(json.load(fh))
except FileNotFoundError:
  pass

m = dict(httpProxy='http_proxy', httpsProxy='https_proxy', noProxy='no_proxy')
d['proxies']['default'].update({ k : os.environ[v] for k, v in m.items() })

f.parent.mkdir(parents=True, exist_ok=True)
with f.open('w') as fh:
  json.dump(d, fh, indent=4)
EOF

  msg "configure docker daemon"
  msg "configure $SERVICE_CONFIG"
  $SUDO mkdir -p $(dirname $SERVICE_CONFIG)
  cat <<EOF | $SUDO tee $SERVICE_CONFIG
[Service]
Environment="HTTP_PROXY=$http_proxy"
Environment="HTTPS_PROXY=$https_proxy"
Environment="NO_PROXY=$no_proxy"
EOF

  msg "configure $DOCKERD_CONFIG"
  $SUDO mkdir -p $(dirname $DOCKERD_CONFIG)
  local mirrors=""
  if [[ -n $REPO_MIRROR ]]; then
    mirrors="\"registry-mirrors\": [\"$REPO_MIRROR\"],"
  fi
  cat <<EOF | $SUDO tee $DOCKERD_CONFIG
{
  "log-opts": {
    "max-size": "500m"
  },
  $mirrors
  "exec-opts": ["native.cgroupdriver=systemd"],
  "insecure-registries": ["10.0.0.0/8", "127.0.0.0/8"]
}
EOF

  msg "enable docker service"
  $SUDO systemctl enable docker

  msg "restart docker service"
  $SUDO systemctl daemon-reload
  $SUDO systemctl restart docker

  if groups | grep -qwv docker; then
    msg "add docker group to $USER"
    $SUDO usermod -aG docker $USER
    msg "logout and login again or reboot to take effect"
  fi
}

main "$@"
