#!/usr/bin/env bash
# author: joe.zheng
# version: 23.06.08

set -e

SELF="$(basename $0)"
SELF_VERSION="$(sed -n '1,4s/# version: \(.*\)/\1/p' $0)"

SUDO="sudo"
if [[ $(id -u) == "0" ]]; then
  SUDO=""
fi

VERSION="3.10.0"      # version to install
DRY_RUN=n             # print information only
MIRROR="auto"         # mirror option
MIRRORS="yes no auto" # valid mirror options
UNINSTALL=n           # reset the deployment and uninstall components
OFFLINE=${OFFLINE:-n} # no external network

BASEURL="https://get.helm.sh"
BASEURL_MIRROR="https://mirrors.huaweicloud.com/helm"
VARIANT="$(uname -s | tr A-Z a-z)-$(uname -m | sed 's/x86_64/amd64/')"

CACHE="cache"
CACHE_PACKAGES="$CACHE/packages/common"

function msg() {
  echo "> $@"
}

function err() {
  echo "> $@" >&2
}

function usage() {
  cat <<EOF
Usage: $SELF [-m <type>] [-v <ver>] [-U] [-n] [-h]

  Setup Helm the easy way

  -m <type>: install via mirror [$MIRRORS], default: $MIRROR
  -v <ver>:  target version, default: $VERSION
  -U:        uninstall Helm, default: $UNINSTALL
  -n:        print information only, default: $DRY_RUN
  -h:        print the usage message

Cache:

  To speed up deployment, the required files will be cached at "$CACHE"

Examples:

  1. Install Helm
     $SELF

  2. Uninstall Helm
     $SELF -U

  3. Install Helm with specific version
     $SELF -v 3.12.0

Version: $SELF_VERSION
EOF

}

function main() {
  # adjust default version if already deployed
  VERSION="$(current_version)"

  while getopts ":m:v:hnU" opt
  do
    case $opt in
      m ) MIRROR=$OPTARG
          if echo $MIRRORS | grep -v -w $MIRROR >/dev/null 2>&1; then
            err "invalid mirror option $MIRROR"
            usage && exit 1
          fi
          ;;
      v ) VERSION=${OPTARG#v};;
      U ) UNINSTALL=y;;
      n ) DRY_RUN=y;;
      h ) usage && exit;;
      * ) usage && echo "invalid option: -$OPTARG" && exit 1;;
    esac
  done
  shift $((OPTIND-1))

  for v in CACHE DRY_RUN MIRROR UNINSTALL VERSION
  do
    eval echo "$v: \${$v}"
  done

  [[ $DRY_RUN == "y" ]] && exit

  validate_sudo
  check_prerequisites
  check_network
  check_mirror
  ensure_workdir

  local install_dir="/usr/local/bin"
  local install_bin="/usr/local/bin/helm"
  local package_dir="$CACHE_PACKAGES/helm-$VERSION"
  local package_bin="$package_dir/helm"

  mkdir -p $package_dir

  if [[ ! -e "$package_bin" ]]; then
    if [[ $OFFLINE == "y" ]]; then
      msg "WARNING: offline mode, cache must be ready"
      msg "try to install from the cache"
    else
      local base_url="$BASEURL"
      local file="helm-v$VERSION-$VARIANT.tar.gz"
      if [[ $NEED_MIRROR == "y" ]]; then
        base_url="$BASEURL_MIRROR/v$VERSION"
      fi
      msg "download $base_url/$file -> $package_dir"
      curl -L $base_url/$file | tar xz -C $package_dir --strip-components=1
    fi
  fi

  if [[ $UNINSTALL == "y" ]]; then
    msg "uninstall helm"
    $SUDO rm -f $install_bin
  else
    msg "install helm"
    $SUDO install $package_bin $install_bin
  fi

  cat <<EOF

# here are some tips to follow:
helm help
helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo list
helm repo update
helm search repo bitnami
helm show chart bitnami/nginx
helm upgrade -i nginx bitnami/nginx
helm uninstall nginx
EOF

  echo "done"
}

function current_version() {
  local version="$VERSION"
  if [[ -n $(which helm) ]]; then
    version="$(helm version --template '{{.Version}}')"
    version=${version#v}
  fi
  echo $version
}

function validate_sudo() {
  if [[ -n $SUDO ]]; then
    msg "validate sudo"
    sudo -v
  fi
}

function check_prerequisites() {
  msg "check prerequisites"
  if [[ -z $(which curl) ]]; then
    err "curl is not available"
    exit 1
  fi
  if ! kubectl version >/dev/null 2>&1; then
    err "can't access k8s cluster"
    msg "WARNING: helm will not work without k8s cluster!"
  fi
}

function check_network() {
  msg "check network"
  if [[ $OFFLINE != 'y' ]]; then
    if ! curl -s -m 3 -I example.com >/dev/null; then
      msg "can't access external network"
      OFFLINE="y"
    fi
  fi
  msg "offline mode: $OFFLINE"
}

NEED_MIRROR=n
function check_mirror() {
  msg "is mirror needed"
  if [[ $MIRROR == "auto" ]]; then
    MIRROR=yes # default as needed
    if [[ $OFFLINE == "y" ]]; then
      msg "offline mode, assume mirror is needed"
    else
      msg "check whether we can access google cloud"
      local target="https://cloud.google.com"
      if curl -s -m 5 $target >/dev/null 2>&1; then
        msg "curl $target is OK"
        MIRROR=no
      else
        msg "curl $target is FAILED"
      fi
    fi
  fi
  if [[ $MIRROR == "yes" ]]; then
    NEED_MIRROR=y
  fi
  msg "need mirror: $NEED_MIRROR"
}

function ensure_workdir() {
  msg "ensure workdir"

  for d in $CACHE_PACKAGES; do
    if [[ ! -d $d ]]; then
      msg "create dir: $d"
      mkdir -p $d
    fi
  done
}

main "$@"
