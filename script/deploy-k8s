#!/usr/bin/env bash
# author: joe.zheng
# version: 22.04.05

set -e

SELF=`basename $0`

SUDO="sudo"
if [[ $(id -u) == "0" ]]; then
  SUDO=""
fi

DOCKER="$SUDO docker"
if id -nG | grep -qw docker; then
  DOCKER="docker"
fi

# IP of the primary interface on the host
HOST_IP=$(ip route get 1 | head -1 | awk '{print $7}')
HOST_DNS=$(hostname -f)

K8S_NOPROXY=".svc,.svc.cluster.local"
K8S_PKGS="kubelet kubeadm kubectl"
CACHE="cache"                         # the cache directory
CACHE_IMAGE="$CACHE/image"            # script to save or load images

ADDRESS=$HOST_IP      # API server IP address
ENDPOINT=""           # endpoint for all control-plane nodes
SANS=$HOST_DNS        # API server certificate SANs
VERSION=1.20.0        # k8s stable version
OPTIONS="yes no auto" # valid options
MIRROR=auto           # mirror option
RESET=n               # reset cluster first
DRY_RUN=n             # dry run or not
OFFLINE=n             # no external network
NO_CLUSTER=n          # do not init cluster
NO_WORKLOAD=n         # do not schedule workload on control-plane node

function msg() {
  echo "> $@"
}

function err() {
  echo "> $@" >&2
}

function usage() {
  cat <<EOF
Usage: $SELF [-a <addr>] [-e <addr>] [-s <sans>] [-m <opt>] [-v <ver>]
  [-r] [-R] [-C] [-W] [-n] [-h]

  Deploy Kubernetes and initialize a cluster the easy way

  -a <addr>: API server IP address, default: $ADDRESS
  -e <addr>: endpoint for all control-plane nodes, default: "$ENDPOINT"
  -s <sans>: API server certificate SANs separated by ",", default: $SANS
  -m <opt>:  mirror option [$OPTIONS], default: $MIRROR
  -v <ver>:  k8s version, default: $VERSION
  -r:        reset k8s cluster first, default: $RESET
  -R:        reset k8s cluster and stop, same as -rC
  -C:        do not initialize cluster, default: $NO_CLUSTER
  -W:        do not schedule workload on control-plane node, default: $NO_WORKLOAD
  -n:        dry run, print out information only, default: $DRY_RUN
  -h:        print the usage message

  The container images ("*.tar.gz") in "$CACHE" will be loaded automatically.
  You can save all the downloaded container images by the command:

    $CACHE_IMAGE

Examples:

  1. Deploy a single node cluster
     $SELF

  2. Reset the cluster and deploy again
     $SELF -r

  3. Reset the cluster and deploy again with specific version
     $SELF -r -v 1.21.0

  4. Deploy a cluster with one control-plane and one worker node
     # on control-plane node
     $SELF -W
     # check the output command for "kubeadm join"

     # on worker node
     $SELF -C
     # use "kubeadm join" command to join the cluster

  5. Deploy a control-plane node with DNS name vip.k8s.io
     $SELF -W -e vip.k8s.io
EOF

}

while getopts ":a:e:s:m:v:hCWnRr" opt
do
  case $opt in
    a ) ADDRESS=$OPTARG;;
    e ) ENDPOINT=$OPTARG;;
    s ) SANS=$OPTARG;;
    m ) MIRROR=$OPTARG
        if echo $OPTIONS | grep -v -w $MIRROR >/dev/null 2>&1; then
          echo "invalid mirror option $MIRROR"
          usage && exit 1
        fi
        ;;
    v ) VERSION=${OPTARG#v};;
    r ) RESET=y;;
    R ) RESET=y && NO_CLUSTER=y;;
    n ) DRY_RUN=y;;
    C ) NO_CLUSTER=y;;
    W ) NO_WORKLOAD=y;;
    h ) usage && exit;;
    * ) usage && echo "invalid option: -$OPTARG" && exit 1;;
  esac
done
shift $((OPTIND-1))

for v in DOCKER HOST_IP ADDRESS ENDPOINT SANS VERSION MIRROR RESET NO_CLUSTER NO_WORKLOAD DRY_RUN
do
  eval echo "$v: \${$v}"
done

[[ $DRY_RUN == "y" ]] && exit

function main() {
  warn_as_root
  check_prerequisites
  ensure_workdir
  ensure_swapoff
  ensure_iptables
  ensure_selinuxoff
  ensure_firewalloff
  need_mirror
  ensure_installed
  if [[ $RESET == "y" ]]; then
    reset_cluster
  fi
  [[ $NO_CLUSTER != "y" ]] && init_cluster

  msg "done"
  cat <<EOF
here are some useful commands:
- check status: kubectl get pods -A
- enable bash completion: source <(kubectl completion bash)
EOF
}

function dist_name() {
  dist="$(cat /etc/*-release | sed -ne 's/^ID=//p' | xargs echo)"
  if [[ -z $dist ]]; then
    dist="$(lsb_release -s -i)"
  fi
  dist="$(echo $dist | tr '[:upper:]' '[:lower:]')"
  echo $dist
}

function check_prerequisites() {
  msg "check prerequisites"
  if [[ -z $(which perl) ]]; then
    err "perl is not available"
    exit 1
  fi
  if [[ -z $(which curl) ]]; then
    err "curl is not available"
    exit 1
  fi
  if [[ -z $(which docker) ]]; then
    err "docker is not available"
    exit 1
  fi
  msg "check network"
  if ! curl -s -m 2 ifconfig.co >/dev/null; then
    err "can't access external network, continue for offline scenario"
    OFFLINE="y"
  else
    msg "check docker pull"
    if ! $DOCKER pull hello-world >/dev/null 2>&1; then
      err "docker pull can't work, check docker configuration first"
      exit 1
    fi
  fi
}

NEED_MIRROR=n
function need_mirror() {
  msg "is mirror needed"
  if [[ $MIRROR == "auto" ]]; then
    MIRROR=yes # default as needed
    msg "check whether we can access google cloud"
    if [[ $OFFLINE == "y" ]]; then
      msg "offline mode, assume mirror is needed"
    else
      local target="k8s.gcr.io/pause"
      if $DOCKER pull $target >/dev/null 2>&1; then
        msg "$DOCKER pull $target is OK"
        target="https://cloud.google.com"
        if curl -s -m 5 $target >/dev/null 2>&1; then
          msg "curl $target is OK"
          MIRROR=no
        else
          msg "curl $target is FAILED"
        fi
      else
        msg "$DOCKER pull $target is FAILED"
      fi
    fi
  fi
  if [[ $MIRROR == "yes" ]]; then
    NEED_MIRROR=y
  fi
  msg "need mirror: $NEED_MIRROR"
}

function install_k8s() {
  local dist=$(dist_name)
  msg "install k8s on \"$dist\""

  local cachedir="$CACHE/packages/$dist"
  mkdir -p $cachedir

  if [[ $OFFLINE == "y" ]]; then
    msg "WARNING: offline mode, cache must be ready"
    msg "try to install package from the cache"
    if [[ $dist == "ubuntu" ]]; then
      msg "install $cachedir/*.deb"
      $SUDO dpkg -i $cachedir/*.deb
      msg "no auto update for $K8S_PKGS"
      $SUDO apt-mark hold $K8S_PKGS
    elif [[ $dist == "centos" ]]; then
      msg "install $cachedir/*.rpm"
      $SUDO yum install -y -C --disablerepo=* $cachedir/*.rpm
      msg "enabled and start kubelet"
      $SUDO systemctl enable --now kubelet
    else
      err "dist \"$dist\" is not supported!"
      exit 1
    fi

    if [[ -z $(which kubeadm) ]]; then
      msg "kubeadm is not available"
      exit 1
    fi

    # offline mode is done
    return
  fi

  if [[ $dist == "ubuntu" ]]; then
    local codename="xenial"  # the official doc use xenial for all
    local list="/etc/apt/sources.list.d/kubernetes.list"
    local key="https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    local src="https://apt.kubernetes.io/"
    if [[ $NEED_MIRROR == "y" ]]; then
      key="https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg"
      src="https://mirrors.aliyun.com/kubernetes/apt/"
    fi

    msg "add key from $key"
    curl -s $key | $SUDO apt-key add -
    msg "add $src to $list for $codename"
    cat <<EOF | $SUDO tee -a $list
deb $src kubernetes-$codename main
EOF

    msg "clean apt cache before installation"
    $SUDO apt clean

    local pkgsss="$K8S_PKGS "
    local wanted="${pkgsss// /=$VERSION-00 }"
    msg "apt update and install: $wanted"
    # use apt-get instead of apt to keep the downloaded packages
    $SUDO apt update && $SUDO apt-get install -y $wanted
    msg "no auto update for $K8S_PKGS"
    $SUDO apt-mark hold $K8S_PKGS

    msg "save the installed packages to $cachedir"
    cp -r /var/cache/apt/archives/*.deb $cachedir
  elif [[ $dist == "centos" ]]; then
    local name="el7-x86_64"
    local list="/etc/yum.repos.d/kubernetes.repo"
    local src="https://packages.cloud.google.com/yum/repos"
    local key="https://packages.cloud.google.com/yum/doc"
    if [[ $NEED_MIRROR == "y" ]]; then
      key="http://mirrors.aliyun.com/kubernetes/yum/doc"
      src="http://mirrors.aliyun.com/kubernetes/yum/repos"
    fi

    msg "add $src to $list for $name"
    # repo_gpgcheck is disabled for centos7
    # details in https://github.com/kubernetes/kubernetes/issues/100757
cat <<EOF | $SUDO tee $list
[kubernetes]
name=Kubernetes
baseurl=$src/kubernetes-$name
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=$key/yum-key.gpg $key/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

    msg "enable yum cache"
    local conf="/etc/yum.conf"
    if grep "keepcache" $conf >/dev/null; then
      $SUDO perl -pi -e 's/(keepcache\s*=\s*).*$/${1}1/' $conf
    else
      $SUDO perl -pi -e 's/^(\s*\[main\].*)$/${1}\nkeepcache=1/' $conf
    fi
    $SUDO yum makecache

    msg "clean yum cache before installation"
    $SUDO yum clean packages

    local pkgsss="$K8S_PKGS "
    local wanted="${pkgsss// /-$VERSION }"
    msg "install $wanted"
    $SUDO yum install -y $wanted --disableexcludes=kubernetes
    msg "enabled and start kubelet"
    $SUDO systemctl enable --now kubelet

    msg "save the installed packages to $cachedir"
    if [[ -d /var/cache/dnf ]]; then
      cp /var/cache/dnf/*/packages/*.rpm $cachedir
    else
      cp /var/cache/yum/*/*/*/packages/*.rpm $cachedir
    fi
  else
    err "dist \"$dist\" is not supported!"
    exit 1
  fi
}

function ensure_selinuxoff() {
  msg "ensure SELinux is off"
  if [[ -n "$(which getenforce)" && "$(getenforce)" == "Enforcing" ]]; then
    msg "set SELinux in permissive mode (effectively disabling it)"
    $SUDO setenforce 0
    $SUDO sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
  fi
}

function ensure_installed() {
  msg "ensure k8s installed"

  if [[ -n $(which kubeadm) ]]; then
    local ver="$(kubeadm version -o short)"
    ver=${ver#v}
    msg "already installed, version: $ver"
    if [[ $VERSION != $ver ]]; then
      msg "the requested version ($VERSION) is different from the installed one"
      msg "we only support to switch control-plane version"
      msg "do it by yourself if you really want to switch k8s version"
      msg "here is one solution: reset cluster and delete k8s, then deploy it again"
      msg "  $SELF -R && $SUDO apt autoremove $K8S_PKGS"
    fi
  else
    install_k8s
  fi
}

function ensure_swapoff() {
  # k8s requires swapoff
  msg "ensure swap is off"
  local n=`cat /proc/swaps | wc -l`
  if (( n > 1 )); then
    local swap=$(systemctl list-units | perl -ne 'print $1 if /^\s+(dev-\w+\.swap)\s+/')
    if [[ -n $swap ]]
    then
      msg "disable swap device $swap"
      $SUDO systemctl mask $swap
    fi
    msg "disable any swap device in fstab"
    $SUDO perl -pi -e 's/^(.+(none|swap)\s+swap.+)/#$1/ unless /^#/' /etc/fstab
    msg "swapoff -a"
    $SUDO swapoff -a
  else
    msg "no swap device"
  fi
}

function ensure_firewalloff() {
  msg "ensure firewall is off for simplicity"
  if [[ "$(systemctl is-active firewalld)" == "active" ]]; then
    echo "firewall is active, stop and disable it"
    $SUDO systemctl stop firewalld
    $SUDO systemctl disable firewalld
  fi
}

function ensure_iptables() {
  msg "ensure iptables see bridged traffic"
  if ! lsmod | grep -wq br_netfilter; then
    echo "br_netfilter is not loaded, load it and make it auto-loaded"
    $SUDO modprobe br_netfilter
    cat <<EOF | $SUDO tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF
  fi
  local prefix="/proc/sys/net/bridge/bridge-nf-call-ip"
  if [[ "$(cat ${prefix}tables)" != "1" || "$(cat ${prefix}6tables)" != "1" ]]; then
    msg "bridge-nf-call-iptables is disabled, enable it"
    cat <<EOF | $SUDO tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
    $SUDO sysctl --system
  fi
}

function warn_as_root() {
  if [[ $(id -u) == "0" ]]; then
    msg "you are running as root user, kubectl will be configured to root only!"
    sleep 3
  fi
}

function ensure_workdir() {
  msg "ensure workdir"

  if [[ ! -d $CACHE ]]; then
    msg "create dir: $CACHE"
    mkdir -p $CACHE
  fi

  if [[ ! -f $CACHE_IMAGE ]]; then
    msg "create script: $CACHE_IMAGE"
cat <<'EOF' > $CACHE_IMAGE
#!/usr/bin/env bash
# AUTO-GENERATED
# load or save images

set -e

DOCKER="sudo docker"
if [[ "$(id -u)" == "0" ]] || id -nG | grep -qw docker; then
  DOCKER="docker"
fi

cd $(dirname $0)

if [[ $1 == "load" ]]; then
  echo "load images:"
  images="$(ls *.tar.gz 2>/dev/null || true)"
  for i in $images; do
    echo "loading $i"
    $DOCKER load -i $i
  done
else
  echo "save images:"
  images="$($DOCKER images --format '{{.Repository}}:{{.Tag}}')"
  for i in $images; do
    echo "saving $i"
    $DOCKER save $i | gzip > ${i##*/}.tar.gz;
  done
fi
EOF

    chmod a+x $CACHE_IMAGE
  fi
}

function reset_cluster() {
  msg "reset cluster"
  $SUDO kubeadm reset
  msg "release cni0 if any"
  if ip link show cni0 >/dev/null 2>&1; then
    $SUDO ip link set cni0 down
    $SUDO ip link delete cni0
  fi
  msg "clean cni config"
  $SUDO rm -f /etc/cni/net.d/*
}

function init_cluster() {
  msg "initialize cluster"

  if kubectl cluster-info >/dev/null 2>&1; then
    msg "already initialized"
    return
  fi

  [[ $OFFLINE == "y" ]] && msg "WARNING: offline mode, cache must be ready"

  local flannel="$CACHE/kube-flannel.yml"
  msg "download flannel manifest"
  if [[ ! -e $flannel ]]; then
    curl https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml > $flannel
  fi

  # different CNI addon requires different pod-network-cider, here is for flannel
  local cidr=$(perl -ne 'print $1 if /"Network":\s*"([^"]+)"/' $flannel)

  local extra=
  if [[ -n $SANS ]]; then
    extra="$extra --apiserver-cert-extra-sans=$SANS"
  fi
  if [[ -n $ENDPOINT ]]; then
    extra="$extra --control-plane-endpoint=$ENDPOINT --upload-certs"
  fi
  if [[ $NEED_MIRROR == "y" ]]; then
    local repo="registry.aliyuncs.com/google_containers"
    extra="$extra --image-repository $repo"
    msg "mirror is required, use image repository: $repo"
  fi

  # patch proxy env vars
  for e in no_proxy NO_PROXY
  do
    if [[ -n ${!e} ]]; then
      msg "patch $e: $K8S_NOPROXY,$cidr"
      eval $e="$K8S_NOPROXY,$cidr,${!e}"
    fi
  done

  if [[ -f $CACHE_IMAGE ]]; then
    msg "try to load cached container images"
    $CACHE_IMAGE load
  fi

  msg "init k8s control-plane node, ver:$VERSION, api:$ADDRESS, cidr:$cidr, extra:'$extra'"
  $SUDO kubeadm init --kubernetes-version=$VERSION --apiserver-advertise-address=$ADDRESS --pod-network-cidr=$cidr $extra

  # config
  msg "setup config to access cluster"
  mkdir -p $HOME/.kube
  $SUDO cp /etc/kubernetes/admin.conf $HOME/.kube/config
  $SUDO chown $(id -u):$(id -g) $HOME/.kube/config

  # untaint control-plane
  if [[ $NO_WORKLOAD != "y" ]]; then
    msg "allow to schedule pods on the control-plane"
    kubectl taint nodes --all node-role.kubernetes.io/master-
  fi

  # install flannel to manage the network
  msg "install flannel"
  kubectl apply -f $flannel
}

main "$@"