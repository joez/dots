#!/usr/bin/env bash
# author: joe.zheng
# version: 21.7.19

set -e

SELF=`basename $0`
# IP of the primary interface on the host
HOST_IP=$(ip route get 1 | head -1 | awk '{print $7}')
HOST_DNS=$(hostname -f)

DOCKER="sudo docker"
if [[ "$(id -u)" == "0" ]] || id -nG | grep -qw docker; then
  DOCKER="docker"
fi

K8S_PKGS="kubelet kubeadm kubectl"

ADDRESS=$HOST_IP      # API server address
SANS=$HOST_DNS        # API server certificate SANs
VERSION=1.20.0        # k8s stable version
OPTIONS="yes no auto" # valid options
MIRROR=auto           # mirror option
RESET=n               # reset cluster first
DRY_RUN=n             # dry run or not
OFFLINE=n             # no external network
NO_CLUSTER=n          # do not init cluster
NO_WORKLOAD=n         # do not schedule workload on master node

function msg() {
  echo "> $@"
}

function err() {
  echo "> $@" >&2
}

function usage() {
  cat <<EOF
Usage: $SELF [-a <addr>] [-s <sans>] [-m <opt>] [-v <ver>] [-r] [-R] [-C] [-W] [-n] [-h]
  Deploy k8s and initialize cluster for local development purpose

  -a <addr>: API server address, default: $ADDRESS
  -s <sans>: API server certificate SANs separated by ",", default: $SANS
  -m <opt>:  mirror option [$OPTIONS], default: $MIRROR
  -v <ver>:  k8s version, default: $VERSION
  -r:        reset k8s cluster first, default: $RESET
  -R:        reset k8s cluster and stop, same as -rC
  -C:        do not initialize cluster, default: $NO_CLUSTER
  -W:        do not schedule workload on master node, default: $NO_WORKLOAD
  -n:        dry run, print out information only, default: $DRY_RUN
  -h:        print the usage message
EOF

}

while getopts ":a:s:m:v:hCWnRr" opt
do
  case $opt in
    a ) ADDRESS=$OPTARG;;
    s ) SANS=$OPTARG;;
    m ) MIRROR=$OPTARG
        if echo $OPTIONS | grep -v -w $MIRROR >/dev/null 2>&1; then
          echo "invalid mirror option $MIRROR"
          usage && exit 1
        fi
        ;;
    v ) VERSION=${OPTARG#v};;
    r ) RESET=y;;
    R ) RESET=y && NO_CLUSTER=y;;
    n ) DRY_RUN=y;;
    C ) NO_CLUSTER=y;;
    W ) NO_WORKLOAD=y;;
    h ) usage && exit;;
    * ) usage && echo "invalid option: -$OPTARG" && exit 1;;
  esac
done
shift $((OPTIND-1))

for v in DOCKER HOST_IP ADDRESS SANS VERSION MIRROR RESET NO_CLUSTER NO_WORKLOAD DRY_RUN
do
  eval echo "$v: \${$v}"
done

[[ $DRY_RUN == "y" ]] && exit

function main() {
  ensure_nonroot
  check_prerequisites
  ensure_swapoff
  ensure_iptables
  ensure_firewalloff
  need_mirror
  ensure_installed
  if [[ $RESET == "y" ]]; then
    reset_cluster
  fi
  [[ $NO_CLUSTER != "y" ]] && init_cluster

  msg "done"
  cat <<EOF
here are some useful commands:
- check status: kubectl get pods -A
- enable bash completion: source <(kubectl completion bash)
EOF
}

function dist_name() {
  dist="$(cat /etc/*-release | sed -ne 's/^ID=//p' | xargs echo)"
  if [[ -z $dist ]]; then
    dist="$(lsb_release -s -i)"
  fi
  dist="$(echo $dist | tr '[:upper:]' '[:lower:]')"
  echo $dist
}

function check_prerequisites() {
  msg "check prerequisites"
  if [[ -z $(which perl) ]]; then
    err "perl is not available"
    exit 1
  fi
  if [[ -z $(which curl) ]]; then
    err "curl is not available"
    exit 1
  fi
  if [[ -z $(which docker) ]]; then
    err "docker is not available"
    exit 1
  fi
  msg "check network"
  if ! curl -s -m 2 ifconfig.co >/dev/null; then
    err "can't access external network, continue for offline scenario"
    OFFLINE="y"
  else
    msg "check docker pull"
    if ! $DOCKER pull hello-world >/dev/null 2>&1; then
      err "docker pull can't work, check docker configuration first"
      exit 1
    fi
  fi
}

NEED_MIRROR=n
function need_mirror() {
  msg "is mirror needed"
  if [[ $MIRROR == "auto" ]]; then
    MIRROR=yes # default as needed
    msg "check whether we can access google cloud"
    if [[ $OFFLINE == "y" ]]; then
      msg "offline mode, assume mirror is needed"
    else
      local target="k8s.gcr.io/pause"
      if $DOCKER pull $target >/dev/null 2>&1; then
	msg "$DOCKER pull $target is OK"
	target="https://cloud.google.com"
        if curl -s -m 5 $target >/dev/null 2>&1; then
          msg "curl $target is OK"
          MIRROR=no
        else
          msg "curl $target is FAILED"
	fi
      else
	msg "$DOCKER pull $target is FAILED"
      fi
    fi
  fi
  if [[ $MIRROR == "yes" ]]; then
    NEED_MIRROR=y
  fi
  msg "need mirror: $NEED_MIRROR"
}

function install_k8s() {
  local dist=$(dist_name)
  msg "install k8s on \"$dist\""

  if [[ $dist == "ubuntu" ]]; then
    local codename="xenial"  # the official doc use xenial for all
    local list="/etc/apt/sources.list.d/kubernetes.list"
    local key="https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    local src="https://apt.kubernetes.io/"
    if [[ $NEED_MIRROR == "y" ]]; then
      key="https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg"
      src="https://mirrors.aliyun.com/kubernetes/apt/"
    fi

    msg "add key from $key"
    curl -s $key | sudo apt-key add -
    msg "add $src to $list for $codename"
    cat <<EOF | sudo tee -a $list
deb $src kubernetes-$codename main
EOF

    local pkgsss="$K8S_PKGS "
    local wanted="${pkgsss// /=$VERSION-00 }"
    msg "apt update and install: $wanted"
    sudo apt update && sudo apt install -y $wanted
    msg "no auto update for $K8S_PKGS"
    sudo apt-mark hold $K8S_PKGS
  elif [[ $dist == "centos" ]]; then
    local name="el7-x86_64"
    local list="/etc/yum.repos.d/kubernetes.repo"
    local src="https://packages.cloud.google.com/yum/repos"
    local key="https://packages.cloud.google.com/yum/doc"
    if [[ $NEED_MIRROR == "y" ]]; then
      key="http://mirrors.aliyun.com/kubernetes/yum/doc"
      src="http://mirrors.aliyun.com/kubernetes/yum/repos"
    fi

    msg "add $src to $list for $name"
cat <<EOF | sudo tee $list
[kubernetes]
name=Kubernetes
baseurl=$src/kubernetes-$name
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=$key/yum-key.gpg $key/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

    if [[ -n "$(which getenforce)" && "$(getenforce)" == "Enforcing" ]]; then
      msg "set SELinux in permissive mode (effectively disabling it)"
      sudo setenforce 0
      sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
    fi

    local pkgsss="$K8S_PKGS "
    local wanted="${pkgsss// /-$VERSION }"
    msg "install $wanted"
    sudo yum install -y $wanted --disableexcludes=kubernetes
    msg "enabled and start kubelet"
    sudo systemctl enable --now kubelet
  else
    err "dist \"$dist\" is not supported!"
    exit 1
  fi
}

function ensure_installed() {
  msg "ensure k8s installed"

  if [[ -n $(which kubeadm) ]]; then
    local ver="$(kubeadm version -o short)"
    ver=${ver#v}
    msg "already installed, version: $ver"
    if [[ $VERSION != $ver ]]; then
      msg "the requested version ($VERSION) is different from the installed one"
      msg "we only support to switch control-plane version"
      msg "do it by yourself if you really want to switch k8s version"
      msg "here is one solution: reset cluster and delete k8s, then deploy it again"
      msg "  $SELF -R && sudo apt autoremove $K8S_PKGS"
    fi
  else
    if [[ $OFFLINE == "y" ]]; then
      msg "can't install k8s in offline mode, exit"
      exit 1
    fi

    install_k8s
  fi
}

function ensure_swapoff() {
  # k8s requires swapoff
  msg "ensure swap is off"
  local n=`cat /proc/swaps | wc -l`
  if (( n > 1 )); then
    local swap=$(systemctl list-units | perl -ne 'print $1 if /^\s+(dev-\w+\.swap)\s+/')
    if [[ -n $swap ]]
    then
      msg "disable swap device $swap"
      sudo systemctl mask $swap
    fi
    msg "disable any swap device in fstab"
    sudo perl -pi -e 's/^(.+(none|swap)\s+swap.+)/#$1/ unless /^#/' /etc/fstab
    msg "swapoff -a"
    sudo swapoff -a
  else
    msg "no swap device"
  fi
}

function ensure_firewalloff() {
  msg "ensure firewall is off for simplicity"
  if [[ "$(systemctl is-active firewalld)" == "active" ]]; then
    echo "firewall is active, stop and disable it"
    sudo systemctl stop firewalld
    sudo systemctl disable firewalld
  fi
}

function ensure_iptables() {
  msg "ensure iptables see bridged traffic"
  if ! lsmod | grep -wq br_netfilter; then
    echo "br_netfilter is not loaded, load it and make it auto-loaded"
    sudo modprobe br_netfilter
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF
  fi
  local prefix="/proc/sys/net/bridge/bridge-nf-call-ip"
  if [[ "$(cat ${prefix}tables)" != "1" || "$(cat ${prefix}6tables)" != "1" ]]; then
    msg "bridge-nf-call-iptables is disabled, enable it"
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
    sudo sysctl --system
  fi
}

function ensure_nonroot() {
  if [[ $(id -u) == "0" ]]; then
    msg "should not run as root user to avoid confusion later!"
    exit 1
  fi
}

function reset_cluster() {
  msg "reset cluster"
  sudo kubeadm reset
  msg "release cni0 if any"
  if ip link show cni0 >/dev/null 2>&1; then
    sudo ip link set cni0 down
    sudo ip link delete cni0
  fi
  msg "clean cni config"
  sudo rm -f /etc/cni/net.d/*
}

function init_cluster() {
  msg "initialize cluster"

  if kubectl cluster-info >/dev/null 2>&1; then
    msg "already initialized"
    return
  fi

  [[ $OFFLINE == "y" ]] && msg "WARNING: offline mode, cache must be ready"

  # different CNI addon requires different pod-network-cider, here is for flannel
  local cidr="10.244.0.0/16"
  local extra=
  msg "init k8s control-plane node, api:$ADDRESS, cidr:$cidr"
  if [[ -n $SANS ]]; then
    extra="$extra --apiserver-cert-extra-sans=$SANS"
  fi
  if [[ $NEED_MIRROR == "y" ]]; then
    local repo="registry.aliyuncs.com/google_containers"
    extra="$extra --image-repository $repo"
    msg "mirror is required, use image repository: $repo"
  fi
  sudo kubeadm init --kubernetes-version=$VERSION --apiserver-advertise-address=$ADDRESS --pod-network-cidr=$cidr $extra

  # config
  msg "setup config to access cluster"
  mkdir -p $HOME/.kube
  sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

  # untaint master
  if [[ $NO_WORKLOAD != "y" ]]; then
    msg "allow to schedule pods on the master"
    kubectl taint nodes --all node-role.kubernetes.io/master-
  fi

  # install flannel to manage the network
  msg "install flannel"
  if [[ ! -e kube-flannel.yml ]]; then
    curl -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  fi
  kubectl apply -f kube-flannel.yml
}

main "$@"
