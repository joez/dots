#!/usr/bin/env bash
#
# author:  joez
# version: v0.1
# date:    2018.07.04

COMMAND="help"
SYNC="y"
SIZE="1G"
SOURCE="/local/work"
TARGET="/local/ramdisk"

CONFIG_ROOT="/local/.ramd"


function usage() {
  local self=`basename $0`

  cat <<EOF
Usage: $self <command> [<options>] [<args>]
  setup a ramdisk as a super fast storage for a workspace

  CAUTION: need "root" permission to run it

Commands:
  setup [-n] [-s size] [<source>] [<target>]
    setup a ramdisk and sync workspace to it if necessary

    -n:         do not sync the workspace with the target ramdisk
    -s <size>:  memory size to used for the ramdisk, default $SIZE
    <source>:   workspace to be put into the ramdisk, default $SOURCE
    <target>:   ramdisk mount point path, default $TARGET

  close [-n] [<target>]
    sync ramdisk with workspace if necessary and close it

    -n:         do not sync the workspace with the target ramdisk
    <target>:   ramdisk mount point path, default $TARGET

  info [<target>]
    check the information of the target ramdisk

    <target>:   ramdisk mount point path, default $TARGET

  help
    print the usage message

Examples:
  $self open /local/work /local/ramdisk
    setup a ramdisk at local/ramdisk and sync content from /local/work

  $self info /local/ramdisk
    check the information about the ramdisk mounted at /local/ramdisk

  $self close /local/ramdisk
    sync content from /local/ramdisk to the original workspace and close it
EOF

}

function absdir() {
  (cd $1 2>/dev/null && PWD= /bin/pwd)
}

function ensuredir() {
  if [ ! -e "$1" ]; then
    mkdir -p "$1"
    if [ $? -ne 0 ]; then
      exit 1
    fi
  fi
}

function configfile() {
  local target=$(absdir $TARGET)
  if [ -n "$target" ]; then 
    echo "$CONFIG_ROOT${target}.cfg"
  else
    echo ""
  fi
}

function saveconfig() {
  local path=$(configfile)
  if [ -n "$path" ]; then
    ensuredir $(dirname $path)
    echo $SOURCE > $path
  fi
}

function loadconfig() {
  local path=$(configfile)
  if [ -n "$path" ] && [ -e "$path" ]; then
    local val=`cat $path`
    if [ -n "$val" ]; then
      SOURCE=$val
    fi
  fi
}


# first arg is the command
if [ -n "$1" ]; then
  COMMAND="$1"
  shift
fi

# then the options
while getopts "ns:" OPTION
do
  case $OPTION in
    n ) SYNC="n";;
    s ) SIZE=$OPTARG;;
    * ) echo "Invalid option passed to '$0' (options:$@)"
    usage && exit 1;;
  esac
done

shift $((OPTIND-1))

# setup the configuration file
ensuredir $CONFIG_ROOT
CONFIG_ROOT=$(absdir $CONFIG_ROOT)

# handle the command
if [ "$COMMAND" = "help" ]; then
  usage && exit
elif [ "$COMMAND" = "status" ]; then
  if [ -n "$1" ]; then
    if [ -e "$1" ]; then
      TARGET=$(absdir $1)
    else
      echo "$1 does not exist"
    fi
  fi
  loadconfig

  out=`df -h -t 'tmpfs' $TARGET 2>/dev/null`
  if [ $? -ne 0 ]; then
    echo "no ramdisk found at $TARGET"
  else
    echo "current ramdisk info:"
    echo "  SOURCE=$SOURCE"
    echo "  TARGET=$TARGET"
    echo ""
    echo "$out"
  fi
elif [ "$COMMAND" = "setup" ]; then
  if [ -n "$2" ]; then
    TARGET=$2
  fi
  ensuredir $TARGET
  TARGET=$(absdir $TARGET)
  loadconfig

  if [ -n "$1" ]; then
    SOURCE=$1
  fi
  ensuredir $SOURCE
  SOURCE=$(absdir $SOURCE)

  # check if there is already one
  out=`df -h -t 'tmpfs' $TARGET 2>/dev/null`
  if [ $? -eq 0 ]; then
    echo "A ramdisk at $TARGET has already existed, skip!"
    echo "$out"
    exit 1
  fi

  echo "start to create a ramdisk ($SIZE) at $TARGET for workspace $SOURCE"
  mount -t tmpfs -o size=$SIZE tmpfs $TARGET
  if [ $? -ne 0 ]; then
    echo "create ramdisk failed"
    exit 1
  else
    echo "ramdisk created"
    saveconfig
  fi

  if [ "$SYNC" = "y" ]; then
    echo "start to sync content from $SOURCE to $TARGET"
    echo "wait for a moment..."
    rsync -aP $SOURCE/ $TARGET
  fi
  
elif [ "$COMMAND" = "close" ]; then
  if [ -n "$1" ]; then
    TARGET=$1
  fi
  ensuredir $TARGET
  TARGET=$(absdir $TARGET)
  loadconfig

  if [ "$SYNC" = "y" ]; then
    echo "start to sync content from $TARGET to $SOURCE"
    echo "wait for a moment..."
    rsync -auP $SOURCE/ $TARGET
  fi

  echo "now close the ramdisk at $TARGET"
  umount $TARGET
  if [ $? -ne 0 ]; then
    echo "close failed"
    exit 1
  else
    echo "close done"
  fi
else
  echo "unsupported command!"
  usage && exit 1
fi
